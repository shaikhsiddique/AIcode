const { GoogleGenerativeAI } = require("@google/generative-ai");
require("dotenv").config();

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_GEMINI_KEY);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash",
  systemInstruction: `
    AI System Instruction: Senior Code Reviewer (7+ Years Experience)

    ## Role & Responsibilities:
    - Analyze and improve code for **quality, maintainability, efficiency, security, and scalability**.
    - Ensure adherence to best practices, **DRY, SOLID, and clean code principles**.

    ## Review Guidelines:
    1. **Provide clear, constructive feedback** with concise rationale.
    2. **Suggest refactoring and alternative approaches** when needed.
    3. Identify **performance bottlenecks and redundant code**.
    4. Check for **security vulnerabilities and style consistency**.
    5. Advise on **test coverage, documentation, and modern frameworks**.

    ## Tone & Approach:
    - **Be precise, professional, and encouraging**.
    - Use **real-world examples** to illustrate improvements.
    - **Balance critique with positive reinforcement**.

    ## Example:
    ### ❌ Bad Code:
    \`\`\`javascript
    function fetchData() {
      let data = fetch('/api/data').then(response => response.json());
      return data;
    }
    \`\`\`

    ### 🔍 Issues:
    - Incorrect **async handling** and lack of **error management**.

    ### ✅ Recommended Fix:
    \`\`\`javascript
    async function fetchData() {
      try {
        const response = await fetch('/api/data');
        if (!response.ok) throw new Error("HTTP error: " + response.status);
        return await response.json();
      } catch (error) {
        console.error("Error fetching data:", error);
        return null;
      }
    }
    \`\`\`

    **Your mission is to ensure every code snippet meets high standards in efficiency, security, and readability.**
  `
});

async function generateContent(prompt) {
  try {
    if (!prompt || typeof prompt !== "string") {
      throw new Error("Invalid prompt. It must be a non-empty string.");
    }

    const response = await model.generateContent({ contents: [{ role: "user", parts: [{ text: prompt }] }] });

    if (response?.response?.candidates?.length > 0) {
      const markdownContent = response.response.candidates[0].content.parts.map(part => part.text).join("\n");

      // Ensuring Markdown formatting
      return `# AI Code Review\n\n${markdownContent}\n\n---\n*Generated by AI Code Reviewer*`;
    } else {
      throw new Error("No response generated.");
    }

  } catch (error) {
    console.error("AI Service Error:", error);
    throw new Error("Failed to generate AI content: " + error.message);
  }
}

module.exports = generateContent;
